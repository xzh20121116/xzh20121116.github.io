<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xzh20121116.github.io</id>
    <title>温故知新</title>
    <updated>2020-04-22T06:14:51.543Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xzh20121116.github.io"/>
    <link rel="self" href="https://xzh20121116.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://xzh20121116.github.io/images/avatar.png</logo>
    <icon>https://xzh20121116.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 温故知新</rights>
    <entry>
        <title type="html"><![CDATA[mysql的几个日志]]></title>
        <id>https://xzh20121116.github.io/post/mysql-de-ji-ge-ri-zhi/</id>
        <link href="https://xzh20121116.github.io/post/mysql-de-ji-ge-ri-zhi/">
        </link>
        <updated>2020-04-22T06:13:41.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h1 id="redo-log">redo log</h1>
<p>redolog的背景：</p>
<blockquote>
<pre><code class="language-sql">update user_table set name='java3y' where id = '3'
</code></pre>
<p>针对这条sql，它的执行过程是这样的：先把id=3的行查出来，然后将name 字段改成 java 3y，看起来没问题。</p>
<p>实际上 mysql 基本存储结构是 <strong>页（记录都在页里面）</strong>，所以mysql是先把这条记录 所在的页找到，然后把该页<strong>加载到</strong> <strong>内存</strong>，然后把内存修改。</p>
<p>这种情况就存在一个问题，如果内存中数据改了，但是还没刷盘，数据库此时挂了，那么这条修改就丢失了。</p>
<p>如果每次修改之后就刷盘，那么速度会很慢。因此，引入了redo log：内存写完了，会写一份redo log，这份 redo log 记录了这次在某个页上做了什么修改。</p>
<p><strong>总结：<strong>redolog的存在是为了：当我修改的时候，内存改完了，但数据还没有刷盘的时候，此时数据库挂了，我们可以根据</strong>redo log</strong> 来对数据进行恢复，因为<strong>redolog 顺序 IO</strong>，所以写入速度快，并且 redo log 记录的是 物理变化（xxx页做了xxx修改），文件的体积很小，恢复速度很快</p>
</blockquote>
<p><strong>redolog的作用</strong></p>
<blockquote>
<p>为了<strong>持久化</strong>。写完内存，如果数据库挂了，那我们可以通过redo log 来恢复内存，将redo log加载到内存就能恢复到挂调之前的数据了。</p>
</blockquote>
<p>InnoDB独有的日志</p>
<p>特点：记录的是数据页的物理修改</p>
<p>redolog 分为两部分：</p>
<ul>
<li>
<p>日志缓冲（redo log buffer）</p>
<blockquote>
<p>在内存中，该部分日志容易丢失</p>
</blockquote>
</li>
<li>
<p>redo log file</p>
<blockquote>
<p>磁盘上的日志文件，是持久的</p>
</blockquote>
</li>
</ul>
<h1 id="binlog">binlog</h1>
<p>server层的日志，所有的引擎都看可以使用。</p>
<p>记录了<strong>表结构和数据</strong>的变更，比如<strong>update、delete、insert、truncate、create</strong>，不记录<strong>select</strong>。</p>
<p><strong>两种存储格式</strong></p>
<ul>
<li>
<p>statement</p>
<blockquote>
<p>记录的是sql语句</p>
</blockquote>
</li>
<li>
<p>row（常用）</p>
<blockquote>
<p>记录的是修改前、修改后数据</p>
</blockquote>
</li>
</ul>
<p><strong>binlog的作用</strong></p>
<ul>
<li>
<p>复制数据</p>
<blockquote>
<p>mysql 在 一主多从的情况下，备库与主库的数据同步就是通过binlog来实现的</p>
</blockquote>
</li>
<li>
<p>恢复数据</p>
<blockquote>
<p>数据库异常中断，可以 通过binlog来恢复数据</p>
</blockquote>
</li>
</ul>
<h1 id="undo-log">undo log</h1>
<p><strong>作用</strong></p>
<ul>
<li>
<p>回滚</p>
<blockquote>
<p>修改数据的时候，不仅存了redo log ，还存了 undo log</p>
<p>存储的是逻辑日志，如果我们 <strong>insert</strong> 一条数据，那么undolog 会有对应的<strong>delete</strong>日志</p>
</blockquote>
</li>
<li>
<p>多版本控制（mvcc）</p>
<blockquote></blockquote>
</li>
</ul>
<h1 id="延伸问题">延伸问题</h1>
<p><strong>如果整个数据库的数据都被删除了，可以用redolog来恢复吗？</strong></p>
<blockquote>
<p><strong>不能</strong>，因为redo log 存储的数屋里数据的变更，如果内存中的数据已经刷到磁盘了，那么redo log里的数据就无效了</p>
<p><strong>因为redo log 是循环写的，不会保存所有历史数据，文件内容会被覆盖</strong></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[mysql之锁]]></title>
        <id>https://xzh20121116.github.io/post/mysql-zhi-suo/</id>
        <link href="https://xzh20121116.github.io/post/mysql-zhi-suo/">
        </link>
        <updated>2020-04-21T13:53:28.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="表级锁">表级锁</h1>
<p>mysql 里面<strong>表级别</strong>的锁有两种：表锁、元数据锁（meta data lock ，MDL）</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="表级锁">表级锁</h1>
<p>mysql 里面<strong>表级别</strong>的锁有两种：表锁、元数据锁（meta data lock ，MDL）</p>
<!-- more -->
<h2 id="表锁"><strong>表锁</strong></h2>
<p>表锁的语法是 lock tables ... read/write。与 FTWRL类似，可以用 <strong>unlock tables</strong>主动释放锁，也可以在客户端断开连接的时候自动释放。需要注意：lock tables 语法除了会限制其他的线程的读写之外，也限定了本线程接下来的操作对象</p>
<p><strong>举个例子</strong>：</p>
<p>线程A中执行 lock tables  t1 read，t2 write  这个语句，则其他线程写 t1 ，读t2 的语句都会被阻塞。线程A 在释放锁之前，也只能 执行读 t1、写t2的操作。连写t1都不允许，自然也不能访问其他表</p>
<p>对于innodb来说，一般不使用lock tables命令，影响太大</p>
<h2 id="mdl">MDL</h2>
<p>mdl不需要显式使用，在访问一个表的时候会自动加上。你可以想象一下，如果一个查询正在遍历一个表中的数据，而执行期间另一个线程对这个表结构做变更，删了一列，那么查询线程拿到的结果跟表结构对不上，肯定是不行的。</p>
<p>因此，在 MySQL 5.5 版本中引入了 MDL，</p>
<p><strong>MDL 读锁：对一个表做增删改查操作，自动加</strong></p>
<p><strong>MDL 写锁：对表做结构变更操作的时候，自动加</strong></p>
<ul>
<li>读锁之间不互斥，即：多个线程可以同时对一张表增删改查</li>
<li>读写之间互斥、写锁之间互斥：保证变更表结构操作的安全性。因此如果有两个线程要同事给一个表加字段，需要一个等待另一个执行完才能开始</li>
</ul>
<p><strong>mdl的作用</strong>：保证读写的正确性</p>
<h1 id="行级锁">行级锁</h1>
<p>mysql的行锁是引擎层各自实现的，但并不是所有的引擎都支持行锁，MyIsam不支持行锁。</p>
<blockquote>
<p>事务a更新1行数据，事务b也更新同一行数据，那么B要等A执行完之后，才能进行更新</p>
</blockquote>
<h2 id="两阶段锁">两阶段锁</h2>
<p>在innodb中，行锁是在需要的时候才加上的，但并不是不用了就立刻释放，而是等待事务结束了才释放（commit提交后事务结束）。</p>
<p>如果事务中需要锁多行，要把可能造成锁冲突，最可能影响并发度的锁尽量往后放</p>
<h2 id="死锁">死锁</h2>
<table>
<thead>
<tr>
<th>时间点</th>
<th>事务a</th>
<th>事务b</th>
</tr>
</thead>
<tbody>
<tr>
<td>t1</td>
<td>begin; set k=xx where id =1</td>
<td>begin;</td>
</tr>
<tr>
<td>t2</td>
<td></td>
<td>set k =yy where id=2</td>
</tr>
<tr>
<td>t3</td>
<td>set k =yy where id=2</td>
<td></td>
</tr>
<tr>
<td>t4</td>
<td></td>
<td>set k=xx where id =1</td>
</tr>
</tbody>
</table>
<p>这个时候，事务A在等待事务B释放 id =2的行锁，而事务B在等待事务A释放id =1 的行锁，互相等待对方释放锁资源，即进入<strong>死锁</strong>状态</p>
<h2 id="mvcc">MVCC</h2>
<p>mysql中，实际上每条记录在更新的时候都会同步记录一条回滚操作，通过回滚操作都可以得到前一个状态的值。</p>
<p>假如一个值1被按顺序修改为2、3、4，在回滚日志里就会有类似下面的记录</p>
<figure data-type="image" tabindex="1"><img src="https://picgo-xzh.oss-cn-beijing.aliyuncs.com/picgo20200422100302.png" alt="image-20200422100302567" loading="lazy"></figure>
<p>当前值是4，但是在查询这条记录的时候，不同时刻启动的事务会有不同的 <strong>read-view</strong>，在视图A、B、C里面记录的分别是1、2、4</p>
<p>同一条记录在系统中可以存在多个版本，这就是数据库的<strong>多版本并发控制</strong>——MVCC</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://xzh20121116.github.io/post/hello-gridea/</id>
        <link href="https://xzh20121116.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>