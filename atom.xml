<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xzh20121116.github.io</id>
    <title>温故知新</title>
    <updated>2020-04-23T07:36:47.115Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xzh20121116.github.io"/>
    <link rel="self" href="https://xzh20121116.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://xzh20121116.github.io/images/avatar.png</logo>
    <icon>https://xzh20121116.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 温故知新</rights>
    <entry>
        <title type="html"><![CDATA[谈谈线程的通信与协作：sleep、wait、notify、yield、join的区别]]></title>
        <id>https://xzh20121116.github.io/post/tan-tan-xian-cheng-de-tong-xin-yu-xie-zuo-sleepwaitnotifyyieldjoin-de-qu-bie/</id>
        <link href="https://xzh20121116.github.io/post/tan-tan-xian-cheng-de-tong-xin-yu-xie-zuo-sleepwaitnotifyyieldjoin-de-qu-bie/">
        </link>
        <updated>2020-04-23T07:34:30.000Z</updated>
        <summary type="html"><![CDATA[<p>谈谈线程的通信与协作：sleep、wait、notify、yield、join的区别</p>
]]></summary>
        <content type="html"><![CDATA[<p>谈谈线程的通信与协作：sleep、wait、notify、yield、join的区别</p>
<!--more-->
<h1 id="零-引子">零、引子</h1>
<p>线程间通过共享数据来实现通信，即:多个线程主动读取一个共享数据。</p>
<p>举例：共享资源 int a；A、B两个线程轮序a的值，来确定自己做什么，浪费了cpu资源</p>
<h1 id="一-靠共享变量来做控制">一、靠共享变量来做控制</h1>
<h2 id="1-waitnotify机制配合synchronized">1、wait/notify机制（配合Synchronized）</h2>
<h3 id="适用范围">适用范围</h3>
<p>Synchronized代码中才能使用，因为这几个都是obj的方法</p>
<p>即<strong>等待通知机制</strong>，主要由<strong>object</strong>类中的以下三个方法保证：wait、notify、notifyAll</p>
<p>这三个方法<strong>不是Thread</strong>中的方法，而<strong>是Object</strong>中的方法。原因是：每个对象都有monitor（锁），所以让当前某个线程等待某个对象锁，应该通过这个对象来操作，而不是让当前的线程来操作，因为当前线程可能会等待多个线程的锁。</p>
<h3 id="sleep"><strong>sleep</strong></h3>
<blockquote>
<p><strong>Thread</strong>的方法</p>
<p>让出cpu资源，不让锁</p>
<p>当前线程进入阻塞，并释放cpu资源，无优先级、无法被<strong>notify</strong>唤醒</p>
</blockquote>
<h3 id="yield"><strong>yield</strong></h3>
<blockquote>
<p><strong>Thread</strong>的方法</p>
<p>让出cpu时间，类似sleep，但是无法指定时长，让同优先级的线程有优先执行的机会，调用<strong>yield</strong>只是一个建议：告诉线程调度器，我好了，让相同优先级的线程使用用cpu吧。如果所有正在等待的线程都是低优先级的，则高线程继续执行</p>
</blockquote>
<h3 id="join"><strong>join</strong></h3>
<blockquote>
<p><strong>Thread</strong>的方法</p>
<p>不让锁</p>
<p>当前运行的线程调用另一个线程的join方法，等对方执行完之后再执行自己</p>
</blockquote>
<p>wait、notify、notifyall都是obj的方法，必须用在synchronized中</p>
<h3 id="wait"><strong>wait</strong></h3>
<blockquote>
<p>让出cpu和锁，等待notify唤醒</p>
</blockquote>
<h3 id="notify">notify</h3>
<blockquote>
<p><strong>随机唤醒</strong>一个正在等待这个对象锁的线程</p>
</blockquote>
<h3 id="notifyall">notifyall</h3>
<blockquote>
<p><strong>唤醒全部</strong>正在等待这个对象锁的线程</p>
</blockquote>
<p>wait()，notify()及notifyAll()只能在synchronized语句中使用，但是如果使用的是ReenTrantLock实现同步，该如何达到这三个方法的效果呢？解决方法是使用ReenTrantLock.newCondition()获取一个Condition类对象，然后Condition的await()，signal()以及signalAll()分别对应上面的三个方法。</p>
<h2 id="2-condition配合lock">2、Condition（配合Lock）</h2>
<p>在jdk1.5中出现的，用于<strong>替代</strong>obj的wait、notify。实现线程间的协作，依赖于Lock，能够更安全高效的实现线程间协作。</p>
<p>Condition是个<strong>接口</strong>，基本方法就是**await（）、signal()**方法。</p>
<p><strong>使用范围：</strong></p>
<blockquote>
<p><strong>lock.lock()<strong>和</strong>lock.unlock</strong>之间</p>
</blockquote>
<p>Condition依赖于Lock接口</p>
<blockquote>
<p>生成一个Condition的基本代码是：<strong>lock.newCondition();</strong></p>
</blockquote>
<p><strong>与Object对应方法如下</strong></p>
<blockquote>
<ul>
<li><strong>Conditon中的await()对应Object的wait()；</strong></li>
<li><strong>Condition中的signal()对应Object的notify()；</strong></li>
<li><strong>Condition中的signalAll()对应Object的notifyAll()。</strong></li>
</ul>
</blockquote>
<p><strong>多个线程（Thread）可以竞争同一把锁，一把锁也可以关联多个Condition</strong></p>
<blockquote>
<figure data-type="image" tabindex="1"><img src="https://picgo-xzh.oss-cn-beijing.aliyuncs.com/picgo20200423141733.png" alt="image-20200423141733716" loading="lazy"></figure>
</blockquote>
<h2 id="3-volatile">3、volatile</h2>
<p>被volatile修饰的共享变量，具有以下两种特性</p>
<ol>
<li>禁止指令重排</li>
<li><strong>保证了不同线程对该变量操作的内存可见性</strong></li>
</ol>
<p>volatile修饰的变量值，直接存在主内存中，保证所修饰的变量对于多个线程可见性，只要他被修改，其他线程读到的一定是最新的值。</p>
<blockquote>
<p>对于自增操作不是原子性的，多个线程对一个volatile的变量进行++操作，结果不准。</p>
<p>想要原子自增需要用到下面的操作</p>
</blockquote>
<h2 id="4-利用atomicinteger">4、利用AtomicInteger</h2>
<p>底层实现是<strong>Unsafe类</strong>的<strong>CAS操作</strong></p>
<blockquote>
<p><strong>在高并发情况下，LongAdder(累加器)比AtomicLong原子操作效率更高</strong></p>
<p>LongAdder累加器是java8新加入的</p>
</blockquote>
<h1 id="二-信号量同步">二、信号量同步</h1>
<p>信号量同步是指在不同的线程之间，通过传递同步信号量来协调线程执行的先后次序。这里重点分析其中2个</p>
<h2 id="countdownlatch"><strong>CountDownLatch</strong></h2>
<p>允许一个或多个线程等待其他线程完成操作,本质上是一个<strong>AQS计数器</strong>，通过AQS来实现线程的等待与唤醒</p>
<blockquote>
<p>**需求：**解析一个文件下多个txt文件数据，可以用多线程解析，等到所有数据解析完毕后再进行其他操作</p>
</blockquote>
<p><strong>代码实现：</strong></p>
<pre><code class="language-java">public class CountDownLatchTest {
	// 等待几个点完成,就传入几
	private static CountDownLatch countDownLatch = new CountDownLatch(2);
  
	public static void main(String[] args) throws InterruptedException {
		Thread thread1 = new Thread(() -&gt; {
			countDownLatch.countDown();
			System.out.println(Thread.currentThread().getName()+&quot;gogo&quot;);
		});
		Thread thread2 = new Thread(() -&gt; {
			countDownLatch.countDown();
			System.out.println(Thread.currentThread().getName()+&quot;gogo&quot;);
		});
		thread2.start();
		thread1.start();

		countDownLatch.await();
		System.out.println(&quot;over&quot;);
	}

}
</code></pre>
<h2 id="semaphore">Semaphore</h2>
<blockquote>
<p>场景：</p>
<p>车站案件：三个窗口在安检，哪个空闲了，就安排非空闲窗口的人去空闲的</p>
</blockquote>
<h2 id="cyclicbarrier">CyclicBarrier</h2>
<p>循环栅栏</p>
<blockquote>
<p>场景：</p>
<p>车站安检，3个人同时进去，3个人都安检完了，再放下一批三个人进去安检</p>
</blockquote>
<h1 id="三-pipedinputstream">三、PipedInputStream</h1>
<p>用流在两个线程间通信，但是<strong>java中的Stream是单向</strong>的，需要在两个线程中分别建立input和output，性能差</p>
<h1 id="四-blockingqueue阻塞队列">四、BlockingQueue（阻塞队列）</h1>
<p>BlockingQueue有一个特征：</p>
<p>当生产者线程试图向BlockingQueue中放入元素的时候，如果该队列已经满了，则该线程被阻塞;</p>
<p>当消费者试图从BlockingQueue中取出元素的时候，如果该队列已空，则线程被阻塞。</p>
<p>程序中两个线程交替向BlockingQueue放入、取出元素，就能很好的控制线程的通讯</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[线程的生命周期、6种状态的流转]]></title>
        <id>https://xzh20121116.github.io/post/xian-cheng-de-sheng-ming-zhou-qi-6-chong-zhuang-tai-de-liu-zhuan/</id>
        <link href="https://xzh20121116.github.io/post/xian-cheng-de-sheng-ming-zhou-qi-6-chong-zhuang-tai-de-liu-zhuan/">
        </link>
        <updated>2020-04-23T05:22:51.000Z</updated>
        <summary type="html"><![CDATA[<p>线程的生命周期、6种状态的流转</p>
]]></summary>
        <content type="html"><![CDATA[<p>线程的生命周期、6种状态的流转</p>
<!-- more -->
<h1 id="到底有几种状态">到底有几种状态</h1>
<p>java/lang/Thread.java中 State是个枚举，里面定义了6种状态</p>
<h1 id="线程的6种状态">线程的6种状态</h1>
<ul>
<li>New（新建）</li>
<li>Runnable（运行）</li>
<li>Blocked（阻塞）</li>
<li>Waitting（无限期等待）</li>
<li>Timed Watting（限期等待）</li>
<li>Terminated（终止）</li>
</ul>
<h4 id="new新建">New（新建）</h4>
<p>新创建了一个线程对象，但是还没有调用start（）方法</p>
<h4 id="runnable运行">Runnable（运行）</h4>
<p>包含了操作系统线程中的<strong>Ready</strong>（就绪）和<strong>Running</strong>（运行中）</p>
<ul>
<li>
<p><strong>Ready</strong></p>
<p>线程对象创建后，其他线程（比如main线程）调用了该对象的start（）方法</p>
<p>该状态的线程位于可运行线程池中，等待被线程调度选中，获取cpu的使用权，也就是说有了被cpu运行的资格</p>
</li>
<li>
<p><strong>Running</strong></p>
<p>就ready绪状态的线程在获得cpu时间片后转换为运行中Running</p>
</li>
</ul>
<h4 id="blocked阻塞">Blocked（阻塞）</h4>
<p>在等待着获取一个排它锁（例如：synchronized），这个时间将在另外一个线程放弃这个锁的时候发生</p>
<h4 id="waitting无限期等待">waitting（无限期等待）</h4>
<p>进入该状态的线程需要等待其他线程做出一些特定动作（通知或中断），需要被显示的唤醒，否则就会处于无线等待的状态</p>
<h4 id="timed-waitting限期等待">Timed Waitting（限期等待）</h4>
<p>在达到一定时间之后他们会自动唤醒</p>
<h4 id="终止状态">终止状态</h4>
<p>当线程的run（）方法完成时，或者主线程的main（）方法完成时，我们就认为它终止了。这个线程对象也许是活的，但是他已经不是一个单独执行的线程，线程一旦终止，就不能复生</p>
<h1 id="线程状态的流转">线程状态的流转</h1>
<figure data-type="image" tabindex="1"><img src="https://picgo-xzh.oss-cn-beijing.aliyuncs.com/picgo20200423125835.png" alt="image-20200423125835603" loading="lazy"></figure>
<p>重点掌握运行、阻塞、就绪之间的通信机制</p>
<h4 id="sleep-yield-join-wait">sleep（）、yield（）、join（）、wait（）</h4>
<p><strong>sleep</strong></p>
<blockquote>
<p><strong>Thread</strong>的方法</p>
<p>让出cpu资源，不让锁</p>
<p>当前线程进入阻塞，并释放cpu资源，无优先级、无法被<strong>notify</strong>唤醒</p>
</blockquote>
<p><strong>yield</strong></p>
<blockquote>
<p><strong>Thread</strong>的方法</p>
<p>让出cpu时间，类似sleep，但是无法指定时长，让同优先级的线程有优先执行的机会，调用<strong>yield</strong>只是一个建议：告诉线程调度器，我好了，让相同优先级的线程使用用cpu吧。如果所有正在等待的线程都是低优先级的，则高线程继续执行</p>
</blockquote>
<p><strong>join</strong></p>
<blockquote>
<p><strong>Thread</strong>的方法</p>
<p>不让锁</p>
<p>当前运行的线程调用另一个线程的join方法，等对方执行完之后再执行自己</p>
</blockquote>
<p>wait、notify、notifyall都是obj的方法，必须用在synchronized中</p>
<p><strong>wait</strong></p>
<blockquote>
<p>让出cpu和锁，等待notify唤醒</p>
</blockquote>
<p>wait()，notify()及notifyAll()只能在synchronized语句中使用，但是如果使用的是ReenTrantLock实现同步，该如何达到这三个方法的效果呢？解决方法是使用ReenTrantLock.newCondition()获取一个Condition类对象，然后Condition的await()，signal()以及signalAll()分别对应上面的三个方法。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[为什么删了数据，表的大小不变？]]></title>
        <id>https://xzh20121116.github.io/post/wei-shi-me-shan-liao-shu-ju-biao-de-da-xiao-bu-bian/</id>
        <link href="https://xzh20121116.github.io/post/wei-shi-me-shan-liao-shu-ju-biao-de-da-xiao-bu-bian/">
        </link>
        <updated>2020-04-23T02:43:35.000Z</updated>
        <summary type="html"><![CDATA[<p>为什么删了数据，表的大小不变？</p>
]]></summary>
        <content type="html"><![CDATA[<p>为什么删了数据，表的大小不变？</p>
<!--more-->
<h1 id="背景">背景</h1>
<p>InnoDB表包含两部分：表结构、表数据</p>
<p>InnoDB的数据是按页存储的，删除数据的时候，该数据的位置会被<strong>标记为可复用</strong>。同理，删除一个数据页，该页就被标记为可复用了。</p>
<p>当整个页被从B+树上摘掉之后，可以复用到任何位置。</p>
<p>如果用<strong>delete</strong>删除整个表的数据，那么整个表会被标记为可复用，但大小不变（磁盘文件大小）</p>
<p>delete只是把记录的位置或者数据页标记为<strong>可复用</strong>，但大小不变（磁盘文件大小）。</p>
<p>这些可复用，而没有被使用的空间，看起来就像<strong>空洞</strong>。</p>
<p>如果数据按照索引递增插入，那么索引是紧凑的，如果是随机插入的，就可能造成数据页的分裂。</p>
<p>经过大量增删改的表，都是可能存在空洞的。</p>
<p>如果能把空洞去掉，就能达到收缩表空间的目的。</p>
<p><strong>重建表可以收缩表空间</strong></p>
<h1 id="重建表的三种方式">重建表的三种方式</h1>
<ol>
<li>alter table t engine = InnoDB（也就是 recreate）</li>
<li>analyze table t 其实不是重建表，只是对表的索引信息做重新统计，没有修改数据，这个过程中加了 MDL 读锁；</li>
<li>optimize table t 等于 recreate+analyze。</li>
</ol>
<h2 id="alter-table-a-engineinnodb-命令来重建表">alter table A engine=InnoDB 命令来重建表</h2>
<p><strong>内部的流程（5.6版本之前）：</strong></p>
<ol>
<li>新建一个与A结构相同的表</li>
<li>按照主键id递增的顺序，把数据一行行的从表A里读出来，插入到B表总</li>
</ol>
<p>问题：如果在插入临时表的过程中，有新数据写入a表的话， 就会造成数据丢失</p>
<p>整个ddl过程不是online的</p>
<p><strong>内部的流程（5.6版本之后）：</strong></p>
<p>引入了online ddl，重建表的流程</p>
<ol>
<li>建立一个临时文件，扫描A主键的所有数据页</li>
<li>用数据页中A的记录生成B+树，存储到临时文件中</li>
<li>生成临时文件的过程中，将所有对A的操作记录在一个日志文件（row log）中，对应的是图中state2的状态；</li>
<li>临时文件生成后，将日志文件 中的操作应用到临时文件，得到一个逻辑数据上与表a相同的数据文件，对应的就是state3的状态</li>
<li>用临时文件替换表a的数据文件</li>
<li><img src="https://picgo-xzh.oss-cn-beijing.aliyuncs.com/picgo20200423103730.png" alt="image-20200423103730471" loading="lazy"></li>
</ol>
<h1 id="延伸问题">延伸问题</h1>
<p>想要收缩表空间，结果适得其反？</p>
<ol>
<li>一个表  t 文件大小为1TB</li>
<li>对这个表执行alter table t engine=InnoDB；</li>
<li>执行结束，发现空间不仅没变小，还稍微大了一些，比如变成1.01TB</li>
</ol>
<p><strong>出现上述情况的原因：</strong></p>
<p>重建表，innodb不会把整张表占满，每个页留了1/16给后溪的更新用</p>
<p><strong>场景复现</strong></p>
<ol>
<li>将t重建一次</li>
<li>插入一部分数据，但是插入的数据用掉了一部分的预留空间</li>
<li>再将t重建一次，就会出现这种问题</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[mysql如何主备一致+双m循环复制解决方案]]></title>
        <id>https://xzh20121116.github.io/post/mysql-ru-he-zhu-bei-yi-zhi-shuang-m-xun-huan-fu-zhi-jie-jue-fang-an/</id>
        <link href="https://xzh20121116.github.io/post/mysql-ru-he-zhu-bei-yi-zhi-shuang-m-xun-huan-fu-zhi-jie-jue-fang-an/">
        </link>
        <updated>2020-04-22T08:28:31.000Z</updated>
        <summary type="html"><![CDATA[<p>mysql 如何主备一致+双m循环复制解决方案</p>
]]></summary>
        <content type="html"><![CDATA[<p>mysql 如何主备一致+双m循环复制解决方案</p>
<!-- more -->
<h1 id="事务日志的同步过程">事务日志的同步过程</h1>
<p>备库和主库之间维持了一个长连接，主库内部有一个线程专门服务于备库的这个长连接</p>
<p>一个事务日志的完整同步过程如下：</p>
<ol>
<li>在<strong>备库</strong>上通过 <strong>change master</strong>命令，设置主库的ip、端口、用户名、密码，以及从哪个位置开始请求binlog</li>
<li>在<strong>备库</strong>上执行 <strong>start slave</strong>  命令，这时候<strong>备库</strong>会启动<strong>两</strong>个线程 io/sql，io（负责与主库建立连接）</li>
<li><strong>主库</strong>开始按照备库的传来的<strong>binlog</strong>的位置，从本地读取binlog，发给备库</li>
<li><strong>备库</strong>拿到binlog，写本地中转文件（relay log）</li>
<li><strong>sql线程</strong>开始读relay log，解析并执行</li>
</ol>
<h1 id="双m结构-循环复制问题-解决方案">双m结构--循环复制问题--解决方案</h1>
<ol>
<li>规定两个库的<strong>server id</strong>必须不一样</li>
<li>1个备库连接到binlog，在重放的过程中，生成与原binlog 的serverid相同的新的binlog</li>
<li>每个库在收到主库发来的binlog时，先判断是否跟自己serverid一致，如果一致则丢弃日志</li>
</ol>
<blockquote>
<p>备注：如果做了以上，但是同步过程中修改了serverid，那么原来的serverid的 binlog会被两个主认为不是自己的serverid 而循环执行</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[count(*)、count(主键 id)、count(字段) 和 count(1) 等不同用法的性能差别]]></title>
        <id>https://xzh20121116.github.io/post/countcountzi-duan-countzhu-jian-countxx/</id>
        <link href="https://xzh20121116.github.io/post/countcountzi-duan-countzhu-jian-countxx/">
        </link>
        <updated>2020-04-22T07:28:14.000Z</updated>
        <summary type="html"><![CDATA[<p>count(*)、count(主键 id)、count(字段) 和 count(1) 等不同用法的性能，有哪些差别。</p>
]]></summary>
        <content type="html"><![CDATA[<p>count(*)、count(主键 id)、count(字段) 和 count(1) 等不同用法的性能，有哪些差别。</p>
<!--more-->
<p><strong>count() 是一个聚合函数</strong>，对于返回的结果集，一行行地判断，如果 count 函数的参数不是 NULL，累计值就加 1，否则不加。最后返回累计值。</p>
<p>所以，count(*)、count(主键 id) 和 count(1) 都表示返回满足条件的结果集的总行数；而 count(字段），则表示返回满足条件的数据行里面，参数“字段”不为 NULL 的总个数。</p>
<h2 id="count">count（*）</h2>
<p><strong>count（*）的实现方式</strong></p>
<blockquote>
<p><strong>无条件筛选</strong>的情况下是这样实现的：</p>
<ul>
<li>MyIsam：把表的总行数存在了磁盘上，因此执行count（*）的时候直接返回这个数，效率高</li>
<li>Innodb：需要把数据一行一行的从引擎里读出来，然后累积计数</li>
</ul>
</blockquote>
<p><strong>为什么innodb 不跟 MyIsam一样，存个总数</strong></p>
<blockquote>
<p>因为，即使在<strong>同一个时刻</strong>的<strong>多个查询</strong>，由于mvcc的原因，该返回多少行是不确定的</p>
</blockquote>
<p>InnoDB，主键索引树叶子节点存的是数据，普通索引树的叶子节点村的是主键值，所有：普通索引树比主键索引树小很多。</p>
<p>count(*)  并不会把全部字段取出来，而是专门做了优化，<strong>不取值</strong>。count( *) 肯定不是 null，<strong>按行累加</strong>。</p>
<p>对于<strong>count(*)</strong>，遍历哪个树，结果都是一样的，因此，mysql的优化器会找到最小的树来遍历</p>
<p><strong>为什么不用show table status</strong></p>
<blockquote>
<p>这个命令的输出结果里面有一个<strong>table_rows</strong>用于显示这个表当前有多少行。</p>
<p>索引统计的值是通过采样估算出来的，<strong>table_rows</strong>也是采样估算的，很不准确，官方称误差达到40%到50%</p>
</blockquote>
<p><strong>小结</strong></p>
<blockquote>
<ul>
<li>MyISAM 表虽然 count(*) 很快，但是不支持事务；</li>
<li>show table status 命令虽然返回很快，但是不准确；</li>
<li>InnoDB 表直接 count(*) 会遍历全表，虽然结果准确，但会导致性能问题</li>
</ul>
</blockquote>
<h2 id="分析性能差别的原则"><strong>分析性能差别的原则</strong></h2>
<ol>
<li>server层要什么就给什么</li>
<li>InnoDB只给必要的值</li>
<li>现在的优化器只优化了 count(*) 的语义为“取行数”，其他“显而易见”的优化并没有做。</li>
</ol>
<p>这是什么意思呢？下面一个个分析</p>
<h2 id="count主键-id"><strong>count(主键 id)</strong></h2>
<p>InnoDB <strong>遍历整个表</strong> ，把每一行的id<strong>值都取出来</strong>，返回给server层。server层拿到id后，判断是不可能为空的，就按行累加</p>
<h2 id="count1"><strong>count(1)</strong></h2>
<p>InnoDB 引擎<strong>遍历整张表</strong>，但<strong>不取值</strong>。server 层对于返回的每一行，放一个数字“1”进去，判断是不可能为空的，按行累加。</p>
<p>比**count（主键id）**快，因为这里不涉及解析数据行、拷贝字段值的操作</p>
<h2 id="count字段"><strong>count(字段)</strong></h2>
<p>需要区分<strong>字段是否not null</strong></p>
<ul>
<li>
<p>非空</p>
<blockquote>
<p>一行行的从记录里面读出这个字段，判断不能为null，按行累加</p>
</blockquote>
</li>
<li>
<p>可以为空</p>
<blockquote>
<p>一行行的从记录里面读出这个字段，把值取出来，不是null，才累加</p>
</blockquote>
</li>
</ul>
<p><strong>以上都对应第一条原则：server要什么字段，innoDB就给什么字段</strong>，但是count（*）是个例外</p>
<h2 id="效率排行">效率排行</h2>
<p>count(字段) &lt; count(主键 id) &lt;  count(1) ≈ count(*)</p>
<p>推荐使用 count（*），因为有专门的优化</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[mysql的几个日志]]></title>
        <id>https://xzh20121116.github.io/post/mysql-de-ji-ge-ri-zhi/</id>
        <link href="https://xzh20121116.github.io/post/mysql-de-ji-ge-ri-zhi/">
        </link>
        <updated>2020-04-22T06:13:41.000Z</updated>
        <summary type="html"><![CDATA[<p>mysql的几个日志，有innodb的 redolog，有server层的binlog，还有用于回滚的 undolog</p>
]]></summary>
        <content type="html"><![CDATA[<p>mysql的几个日志，有innodb的 redolog，有server层的binlog，还有用于回滚的 undolog</p>
<!-- more -->
<h1 id="redo-log">redo log</h1>
<p>redolog的背景：</p>
<blockquote>
<pre><code class="language-sql">update user_table set name='王大锤' where id = '3'
</code></pre>
<p>针对这条sql，它的执行过程是这样的：先把id=3的行查出来，然后将name 字段改成 java 3y，看起来没问题。</p>
<p>实际上 mysql 基本存储结构是 <strong>页（记录都在页里面）</strong>，所以mysql是先把这条记录 所在的页找到，然后把该页<strong>加载到</strong> <strong>内存</strong>，然后把内存修改。</p>
<p>这种情况就存在一个问题，如果内存中数据改了，但是还没刷盘，数据库此时挂了，那么这条修改就丢失了。</p>
<p>如果每次修改之后就刷盘，那么速度会很慢。因此，引入了redo log：内存写完了，会写一份redo log，这份 redo log 记录了这次在某个页上做了什么修改。</p>
<p><strong>总结：<strong>redolog的存在是为了：当我修改的时候，内存改完了，但数据还没有刷盘的时候，此时数据库挂了，我们可以根据</strong>redo log</strong> 来对数据进行恢复，因为<strong>redolog 顺序 IO</strong>，所以写入速度快，并且 redo log 记录的是 物理变化（xxx页做了xxx修改），文件的体积很小，恢复速度很快</p>
</blockquote>
<p><strong>redolog的作用</strong></p>
<blockquote>
<p>为了<strong>持久化</strong>。写完内存，如果数据库挂了，那我们可以通过redo log 来恢复内存，将redo log加载到内存就能恢复到挂调之前的数据了。</p>
</blockquote>
<p><strong>redolog 一般设置多大</strong></p>
<blockquote>
<p>如果是几个tb的磁盘，设置为4个文件，每个文件1gb</p>
<p>设置太小的话，很导致很快就被写满，导致强行刷redo log，这样<strong>wal</strong>机制的能力就发挥不出来</p>
<p>备注：wal：Write-Ahead Logging。即：先写日志，再写磁盘</p>
</blockquote>
<p>InnoDB独有的日志</p>
<p>特点：记录的是数据页的物理修改</p>
<p><strong>redolog 分为两部分：</strong></p>
<ul>
<li>
<p>日志缓冲（redo log buffer）</p>
<blockquote>
<p>内存中，该部分日志容易丢失</p>
</blockquote>
</li>
<li>
<p>redo log file</p>
<blockquote>
<p>磁盘上，是持久的</p>
</blockquote>
</li>
</ul>
<pre><code class="language-sql">begin;
insert into t1 .../* 数据的内存被修改，redolog buffer 写入了日志，还未写到redolog文件*/
insert into t2 .../* 数据的内存被修改，redolog buffer 写入了日志，还未写到redolog文件*/
commit; /* 写到redolog文件中 */
</code></pre>
<h1 id="binlog">binlog</h1>
<p>server层的日志，所有的引擎都看可以使用。</p>
<p>记录了<strong>表结构和数据</strong>的变更，比如<strong>update、delete、insert、truncate、create</strong>，不记录<strong>select</strong>。</p>
<p><strong>两种存储格式</strong></p>
<ul>
<li>
<p>statement</p>
<blockquote>
<p>记录的是sql语句，最后有一个commit</p>
</blockquote>
</li>
<li>
<p>row（常用）</p>
<blockquote>
<p>记录的是修改前、修改后数据。最后有一个xid event</p>
</blockquote>
</li>
</ul>
<p><strong>binlog的作用</strong></p>
<ul>
<li>
<p>复制数据</p>
<blockquote>
<p>mysql 在 一主多从的情况下，备库与主库的数据同步就是通过binlog来实现的</p>
</blockquote>
</li>
<li>
<p>恢复数据</p>
<blockquote>
<p>数据库异常中断，可以 通过binlog来恢复数据</p>
</blockquote>
</li>
</ul>
<h1 id="undo-log">undo log</h1>
<p><strong>作用</strong></p>
<ul>
<li>
<p>回滚</p>
<blockquote>
<p>修改数据的时候，不仅存了redo log ，还存了 undo log</p>
<p>存储的是逻辑日志，如果我们 <strong>insert</strong> 一条数据，那么undolog 会有对应的<strong>delete</strong>日志</p>
</blockquote>
</li>
</ul>
<h1 id="延伸问题">延伸问题</h1>
<p><strong>如果整个数据库的数据都被删除了，可以用redolog来恢复吗？</strong></p>
<blockquote>
<p><strong>不能</strong>，因为redo log 存储的数屋里数据的变更，如果内存中的数据已经刷到磁盘了，那么redo log里的数据就无效了</p>
<p><strong>因为redo log 是循环写的，不会保存所有历史数据，文件内容会被覆盖</strong></p>
</blockquote>
<h1 id="两阶段提交">两阶段提交</h1>
<p>示意图：「深色：执行器执行的」。「浅色：innodb内部执行的」</p>
<figure data-type="image" tabindex="1"><img src="https://picgo-xzh.oss-cn-beijing.aliyuncs.com/picgo20200422142011.png" alt="image-20200422142011097" loading="lazy"></figure>
<p><strong>作用</strong></p>
<blockquote>
<p>解决binlog和redo log的数据一致性的问题，让两份日志之间的逻辑一致</p>
</blockquote>
<p>如果<strong>时刻A</strong>发生了崩溃，由于binlog还没写，redolog也没提交，所以恢复的时候，这个事务会回滚。</p>
<p>如果<strong>时刻B</strong>发生了崩溃，mysql会这样处理</p>
<blockquote>
<p>崩溃恢复的规则：</p>
<ol>
<li>如果redo log 里面的事务是完整的（也就是有了commit表示），则直接提交</li>
<li>如果redo log 里面的事务只有<strong>prepare</strong>，则判断对应的<strong>binlog是否存在并完整</strong>
<ul>
<li>是：提交事务</li>
<li>否：回滚事务</li>
</ul>
</li>
</ol>
</blockquote>
<h1 id="追问1mysql是如何指定binlog是完整的">追问1：mysql是如何指定binlog是完整的？</h1>
<blockquote>
<ul>
<li>statement格式：最后会有commit</li>
<li>row格式：最后会有一个xid event</li>
</ul>
<p>mysql 5.6.2版本之后，还引入了<strong>binlog-checksum</strong> 参数，用来校验binlog内容的正确性</p>
</blockquote>
<h1 id="追问2redolog和binlog-是如何关联起来的">追问2：redolog和binlog 是如何关联起来的？</h1>
<blockquote>
<p>他们有一个共同的数据字段，<strong>XID</strong>，恢复的时候，会按顺序扫描 redolog：</p>
<ul>
<li>既有<strong>prepare</strong>、又有<strong>commit</strong>的redolog，直接提交</li>
<li><strong>只有prepare</strong>，<strong>没有commit</strong>的redolog，拿着xid去binlog找对应的事务</li>
</ul>
</blockquote>
<h1 id="数据落盘-changer-buffer-和redolog">数据落盘、changer buffer 和redolog</h1>
<ol>
<li>数据更新的时候如果数据页不再内存中，那么会写入change buffer中，节省从磁盘读取数据页到内存的操作，下次读的时候，会将change buffer做一个merge，所有数据落盘和change buffer 没什么关系</li>
<li>在<strong>内存中数据页</strong>被修改后和磁盘上数据页不一致，称为脏页。</li>
<li>数据落盘：把<strong>内存中的数据页</strong>写到磁盘上，这个过程和redolog没什么关系</li>
<li>崩溃恢复的时候，如果innodb 判断到数据页在崩溃的时候丢失了更新，就会<strong>读取数据页到内存</strong>中，让redo log 更新内存内容。更新之后内存页变成<strong>脏页</strong></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[mysql之锁]]></title>
        <id>https://xzh20121116.github.io/post/mysql-zhi-suo/</id>
        <link href="https://xzh20121116.github.io/post/mysql-zhi-suo/">
        </link>
        <updated>2020-04-21T13:53:28.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="表级锁">表级锁</h1>
<p>mysql 里面<strong>表级别</strong>的锁有两种：表锁、元数据锁（meta data lock ，MDL）</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="表级锁">表级锁</h1>
<p>mysql 里面<strong>表级别</strong>的锁有两种：表锁、元数据锁（meta data lock ，MDL）</p>
<!-- more -->
<h2 id="表锁"><strong>表锁</strong></h2>
<p>表锁的语法是 lock tables ... read/write。与 FTWRL类似，可以用 <strong>unlock tables</strong>主动释放锁，也可以在客户端断开连接的时候自动释放。需要注意：lock tables 语法除了会限制其他的线程的读写之外，也限定了本线程接下来的操作对象</p>
<p><strong>举个例子</strong>：</p>
<p>线程A中执行 lock tables  t1 read，t2 write  这个语句，则其他线程写 t1 ，读t2 的语句都会被阻塞。线程A 在释放锁之前，也只能 执行读 t1、写t2的操作。连写t1都不允许，自然也不能访问其他表</p>
<p>对于innodb来说，一般不使用lock tables命令，影响太大</p>
<h2 id="mdl">MDL</h2>
<p>mdl不需要显式使用，在访问一个表的时候会自动加上。你可以想象一下，如果一个查询正在遍历一个表中的数据，而执行期间另一个线程对这个表结构做变更，删了一列，那么查询线程拿到的结果跟表结构对不上，肯定是不行的。</p>
<p>因此，在 MySQL 5.5 版本中引入了 MDL，</p>
<p><strong>MDL 读锁：对一个表做增删改查操作，自动加</strong></p>
<p><strong>MDL 写锁：对表做结构变更操作的时候，自动加</strong></p>
<ul>
<li>读锁之间不互斥，即：多个线程可以同时对一张表增删改查</li>
<li>读写之间互斥、写锁之间互斥：保证变更表结构操作的安全性。因此如果有两个线程要同事给一个表加字段，需要一个等待另一个执行完才能开始</li>
</ul>
<p><strong>mdl的作用</strong>：保证读写的正确性</p>
<h1 id="行级锁">行级锁</h1>
<p>mysql的行锁是引擎层各自实现的，但并不是所有的引擎都支持行锁，MyIsam不支持行锁。</p>
<blockquote>
<p>事务a更新1行数据，事务b也更新同一行数据，那么B要等A执行完之后，才能进行更新</p>
</blockquote>
<h2 id="两阶段锁">两阶段锁</h2>
<p>在innodb中，行锁是在需要的时候才加上的，但并不是不用了就立刻释放，而是等待事务结束了才释放（commit提交后事务结束）。</p>
<p>如果事务中需要锁多行，要把可能造成锁冲突，最可能影响并发度的锁尽量往后放</p>
<h2 id="死锁">死锁</h2>
<table>
<thead>
<tr>
<th>时间点</th>
<th>事务a</th>
<th>事务b</th>
</tr>
</thead>
<tbody>
<tr>
<td>t1</td>
<td>begin; set k=xx where id =1</td>
<td>begin;</td>
</tr>
<tr>
<td>t2</td>
<td></td>
<td>set k =yy where id=2</td>
</tr>
<tr>
<td>t3</td>
<td>set k =yy where id=2</td>
<td></td>
</tr>
<tr>
<td>t4</td>
<td></td>
<td>set k=xx where id =1</td>
</tr>
</tbody>
</table>
<p>这个时候，事务A在等待事务B释放 id =2的行锁，而事务B在等待事务A释放id =1 的行锁，互相等待对方释放锁资源，即进入<strong>死锁</strong>状态</p>
<h2 id="mvcc">MVCC</h2>
<p>mysql中，实际上每条记录在更新的时候都会同步记录一条回滚操作，通过回滚操作都可以得到前一个状态的值。</p>
<p>假如一个值1被按顺序修改为2、3、4，在回滚日志里就会有类似下面的记录</p>
<figure data-type="image" tabindex="1"><img src="https://picgo-xzh.oss-cn-beijing.aliyuncs.com/picgo20200422100302.png" alt="image-20200422100302567" loading="lazy"></figure>
<p>当前值是4，但是在查询这条记录的时候，不同时刻启动的事务会有不同的 <strong>read-view</strong>，在视图A、B、C里面记录的分别是1、2、4</p>
<p>同一条记录在系统中可以存在多个版本，这就是数据库的<strong>多版本并发控制</strong>——MVCC</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://xzh20121116.github.io/post/hello-gridea/</id>
        <link href="https://xzh20121116.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>